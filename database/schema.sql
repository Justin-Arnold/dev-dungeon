

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

COMMENT ON SCHEMA "public" IS 'standard public schema';

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."experience_events" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" character varying NOT NULL,
    "experience_value" bigint NOT NULL
);

ALTER TABLE "public"."experience_events" OWNER TO "postgres";

ALTER TABLE "public"."experience_events" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."experience_events_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."github_integration" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "github_name" character varying NOT NULL,
    "github_id" character varying NOT NULL,
    "user_id" "uuid" NOT NULL,
    "commit_count" bigint DEFAULT '0'::bigint NOT NULL
);

ALTER TABLE "public"."github_integration" OWNER TO "postgres";

ALTER TABLE "public"."github_integration" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."github_integration_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

-- Create codewars_integration table
CREATE TABLE IF NOT EXISTS "public"."codewars_integration" (
  created_at TIMESTAMP,
  honor INTEGER,
  user_id VARCHAR(255),
  username VARCHAR(255)
);

ALTER TABLE "public"."codewars_integration" OWNER TO "postgres";

-- Create profile table
CREATE TABLE IF NOT EXISTS "public"."profile" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "user_id" "uuid" NOT NULL,
    "display_name" character varying NOT NULL,
    "total_experience" bigint DEFAULT '0'::bigint NOT NULL
);

ALTER TABLE "public"."profile" OWNER TO "postgres";

ALTER TABLE "public"."profile" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."profile_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE ONLY "public"."experience_events"
    ADD CONSTRAINT "experience_events_name_key" UNIQUE ("name");

ALTER TABLE ONLY "public"."experience_events"
    ADD CONSTRAINT "experience_events_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."github_integration"
    ADD CONSTRAINT "github_integration_github_id_key" UNIQUE ("github_id");

ALTER TABLE ONLY "public"."github_integration"
    ADD CONSTRAINT "github_integration_github_name_key" UNIQUE ("github_name");

ALTER TABLE ONLY "public"."github_integration"
    ADD CONSTRAINT "github_integration_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."github_integration"
    ADD CONSTRAINT "github_integration_user_id_key" UNIQUE ("user_id");

ALTER TABLE ONLY "public"."profile"
    ADD CONSTRAINT "profile_display_name_key" UNIQUE ("display_name");

ALTER TABLE ONLY "public"."profile"
    ADD CONSTRAINT "profile_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."profile"
    ADD CONSTRAINT "profile_user_id_key" UNIQUE ("user_id");

ALTER TABLE ONLY "public"."github_integration"
    ADD CONSTRAINT "github_integration_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."profile"
    ADD CONSTRAINT "profile_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;

CREATE POLICY "Enable insert for authenticated users only" ON "public"."github_integration" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable read access for all authenticated users" ON "public"."github_integration" FOR SELECT TO "authenticated" USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."profile" FOR SELECT USING (true);

ALTER TABLE "public"."experience_events" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."github_integration" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."profile" ENABLE ROW LEVEL SECURITY;

ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";

GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON TABLE "public"."experience_events" TO "anon";
GRANT ALL ON TABLE "public"."experience_events" TO "authenticated";
GRANT ALL ON TABLE "public"."experience_events" TO "service_role";

GRANT ALL ON SEQUENCE "public"."experience_events_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."experience_events_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."experience_events_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."github_integration" TO "anon";
GRANT ALL ON TABLE "public"."github_integration" TO "authenticated";
GRANT ALL ON TABLE "public"."github_integration" TO "service_role";

GRANT ALL ON SEQUENCE "public"."github_integration_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."github_integration_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."github_integration_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."profile" TO "anon";
GRANT ALL ON TABLE "public"."profile" TO "authenticated";
GRANT ALL ON TABLE "public"."profile" TO "service_role";

GRANT ALL ON SEQUENCE "public"."profile_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."profile_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."profile_id_seq" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
